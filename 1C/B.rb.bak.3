require 'pp'

def ppd(*arg)
  if $DEBUG
    pp(*arg)
  end
end

def putsd(*arg)
  if $DEBUG
    puts(*arg)
  end
end

def ri
  readline.to_i
end

def ris
  readline.split.map do |e| e.to_i end
end

def rs
  readline.chomp
end

def rss
  readline.chomp.split
end

def rf
  readline.to_f
end

def rfs
  readline.split.map do |e| e.to_f end
end

def rws(count)
  words = []
  for i in 1 .. count
    words << readline.chomp
  end
  words
end

def uniq_str(str)
  ret = ''
  last = nil

  str.each_char do |c|
    if last != c
      ret += c
      last = c
    end
  end

  ret
end

def check?(arr)
  arr = arr.map do |e|
    e = e.dup
    first = e[0]
    last = e[e.size-1]

    ret = e.gsub(/^#{first}+/, '')
    ret = ret.gsub(/#{last}+$/, '')

    uniq_str(ret)
  end
pp arr

  str = arr.join('')
pp str

  f = {}
  str.each_char do |c|
    f[c] = 1
  end

pp str.size == f.size

  str.size == f.size
end

def simple(arr)
  arr.map do |e|
    e[0] + e[e.size-1]
  end
end

# main
t_start = Time.now

# 問題に応じて
cases = readline().to_i

(1 .. cases).each do |case_index|
  # readline().chomp
  # readline().split

  n = ri
  # arr = rss.map do |e| uniq_str(e) end
  arr = rss

  unless check?(arr)
    puts "Case ##{case_index}: 0"
  else
    arr = simple(arr)
    ans = 0

    f = {}
    arr.join('').each_char do |c|
      f[c] = 1
    end
    chars = f.size

    arr.permutation do |p|
      str = p.join('')
      last = nil
      count = 0
      ok = true
      for i in 0...str.size
        if last != str[i]
          count += 1
          last = str[i]

          if count > chars
            ok = false
            break
          end
        end
      end

      if ok
        ans += 1
      end
    end

    puts "Case ##{case_index}: #{ans}"
  end

  # progress
  trigger = 
    if cases >= 10
      case_index % (cases / 10) == 0
    else
      true
    end

  if trigger
    STDERR.puts("case #{case_index} / #{cases}, time: #{Time.now - t_start} s")
  end
end
